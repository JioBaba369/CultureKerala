
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUpdatingOwnProfile() {
      // User can only update a specific set of fields on their own profile
      let allowedKeys = ['displayName', 'username', 'bio', 'photoURL', 'updatedAt', 'dob', 'gender', 'interests', 'hasCompletedOnboarding', 'location'];
      return request.auth.uid == resource.id && request.resource.data.keys().hasOnly(allowedKeys);
    }
    
    // USERS
    match /users/{userId} {
      allow read;
      allow create: isOwner(userId);
      allow update: isOwner(userId) && isUpdatingOwnProfile();
      // Only admins can delete user accounts
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    // EVENTS, COMMUNITIES, BUSINESSES, DEALS, etc.
    function isResourceOwner(resourceId, collectionName) {
        let resourceData = get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data;
        // Handle different ownership fields
        if ('ownerId' in resourceData) {
            return resourceData.ownerId == request.auth.uid;
        }
        if ('createdBy' in resourceData) {
            return resourceData.createdBy == request.auth.uid;
        }
        if ('roles' in resourceData && 'owners' in resourceData.roles) {
             return request.auth.uid in resourceData.roles.owners;
        }
        return false;
    }

    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    match /{collectionName}/{resourceId} {
        allow read: if collectionName in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'rewards', 'emergency_contacts'];
        allow create: if isSignedIn();
        allow update: if (collectionName in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'rewards', 'emergency_contacts']) && (isAdmin() || isResourceOwner(resourceId, collectionName));
        allow delete: if (collectionName in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'rewards', 'emergency_contacts']) && (isAdmin() || isResourceOwner(resourceId, collectionName));
    }

    // SAVES (user-specific read/write)
    match /saves/{saveId} {
        allow read, write: if isSignedIn() && saveId.split('_')[0] == request.auth.uid;
    }

    // BOOKINGS (user can only create for themselves)
    match /bookings/{bookingId} {
        allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
     match /bookings/{bookingId}/tickets/{ticketId} {
        allow read: if isSignedIn() && get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid;
        allow create: if false; // Should only be created in transaction
    }


    // CONTACT & REPORTS (write-only for users)
    match /contact-messages/{messageId} {
        allow read: if isAdmin();
        allow create: if true;
    }
    match /reports/{reportId} {
        allow read: if isAdmin();
        allow create: if isSignedIn();
    }
  }
}
