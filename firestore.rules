rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================

    function isSelf(userId) {
      return request.auth.uid == userId;
    }
    
    function isUpdatingOwnProfile(userId) {
      // Correctly check ONLY the fields being changed in the update operation.
      // Do not check existing fields.
      let allowedUpdateFields = ['displayName', 'username', 'bio', 'photoURL', 'dob', 'gender', 'interests', 'updatedAt', 'hasCompletedOnboarding'];
      return isSelf(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedUpdateFields);
    }
    
    function userIsAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    function userIsOrganizer() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.organizer == true;
    }
    
    function isCommunityOwner(communityId) {
        let communityDoc = get(/databases/$(database)/documents/communities/$(communityId));
        return request.auth.uid in communityDoc.data.roles.owners;
    }
    
     function isBusinessOwner(businessId) {
        let businessDoc = get(/databases/$(database)/documents/businesses/$(businessId));
        return request.auth.uid == businessDoc.data.ownerId;
    }

    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      allow read;
      allow create: if isSelf(userId);
      allow update: if isUpdatingOwnProfile(userId) || userIsAdmin();
    }
    
    match /contact-messages/{docId} {
        allow create: if request.auth != null;
        allow read, write: if userIsAdmin();
    }
    
    match /reports/{docId} {
        allow create: if isSelf(request.resource.data.reporterId);
        allow read, write: if userIsAdmin();
    }
    
    match /saves/{saveId} {
        // Users can only save/unsave items for themselves.
        // The saveId must be in the format `userId_itemId`.
        allow read, create, delete: if isSelf(split(saveId, '_')[0]);
    }
    
    match /communities/{communityId} {
        allow read: if resource.data.status == 'published';
        allow create: if isSelf(request.resource.data.createdBy);
        allow update: if isCommunityOwner(communityId) || userIsAdmin();
    }
    
    match /businesses/{businessId} {
        allow read: if resource.data.status == 'published';
        allow create: if isSelf(request.resource.data.ownerId);
        allow update: if isBusinessOwner(businessId) || userIsAdmin();
    }

    match /events/{eventId} {
        allow read: if resource.data.status == 'published';
        allow create: if isSelf(request.resource.data.createdBy);
        allow update: if isSelf(request.resource.data.createdBy) || userIsAdmin();
    }

    match /deals/{dealId} {
        allow read: if resource.data.status == 'published';
        allow create: if isSelf(request.resource.data.createdBy);
        allow update: if isSelf(request.resource.data.createdBy) || userIsAdmin();
    }

    match /bookings/{bookingId} {
        allow read, create: if isSelf(request.resource.data.userId);
        match /tickets/{ticketId} {
            allow read, create: if isSelf(request.resource.data.userId);
        }
    }
    
    // Platform Admin collections
    match /movies/{docId} {
      allow read;
      allow write: if userIsAdmin();
    }
    
    match /perks/{docId} {
        allow read;
        allow write: if userIsAdmin();
    }
    
    match /rewards/{docId} {
        allow read;
        allow write: if userIsAdmin();
    }
    
    match /ads/{docId} {
        allow read;
        allow write: if userIsAdmin();
    }
    
    match /classifieds/{docId} {
        allow read;
        allow write: if userIsAdmin() || isSelf(request.resource.data.createdBy);
    }
    
    match /emergency_contacts/{docId} {
        allow read;
        allow write: if userIsAdmin();
    }
  }
}
