rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default Deny: By default, no one has access.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users:
    // - Anyone can create their own user document on signup.
    // - Authenticated users can read other users' public profiles.
    // - Users can only update their own profile.
    // - Admins can update any user profile (for role changes).
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true);
    }

    // Public Content: (Events, Businesses, etc.)
    // - Anyone can read published content.
    // - Authenticated users can create content.
    // - Only the creator or an admin can update/delete content.
    function isOwner(docData) {
      return request.auth.uid == docData.createdBy || request.auth.uid == docData.ownerId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    match /events/{eventId} {
      allow read: if resource.data.status == 'published';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (isOwner(resource.data) || isAdmin());
    }

    match /communities/{communityId} {
      allow read: if resource.data.status == 'published';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (request.auth.uid in resource.data.roles.owners || isAdmin());
    }

    match /businesses/{businessId} {
      allow read: if resource.data.status == 'published';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (isOwner(resource.data) || isAdmin());
    }
    
    match /deals/{dealId} {
        allow read: if resource.data.status == 'published';
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (isOwner(resource.data) || isAdmin());
    }

    match /movies/{movieId} {
        allow read: if resource.data.status == 'now_showing' || resource.data.status == 'upcoming';
        allow create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /classifieds/{classifiedId} {
        allow read: if resource.data.status == 'published';
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (isOwner(resource.data) || isAdmin());
    }

    match /perks/{perkId} {
      allow read: if resource.data.status == 'active';
      allow create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /rewards/{rewardId} {
        allow read: if resource.data.status == 'active';
        allow create, update, delete: if request.auth != null && isAdmin();
    }

    match /ads/{adId} {
      allow read: if resource.data.status == 'running';
      allow create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /emergency_contacts/{contactId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }


    // User-Specific Data
    match /saves/{saveId} {
      allow read, write: if request.auth != null && request.auth.uid == saveId.split('_')[0];
    }
    
    match /reports/{reportId} {
        allow create: if request.auth != null;
        allow read, update: if request.auth != null && isAdmin();
    }

    match /contact-messages/{messageId} {
        allow create: if true;
        allow read, update, delete: if request.auth != null && isAdmin();
    }
    
    // Bookings and Tickets
    // Users can create bookings, but not read/write them directly (done via transaction).
    // Admins can read bookings.
    match /bookings/{bookingId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
        match /tickets/{ticketId} {
             allow create: if request.auth != null;
             allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
        }
    }
  }
}
