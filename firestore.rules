rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has the 'admin' role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    // Users: Users can only read/update their own document.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Saves: Users can only manage their own saved items.
    match /saves/{saveId} {
        allow read, create, delete: if request.auth != null && saveId.startsWith(request.auth.uid);
    }
    
    // Bookings: Users can only create their own bookings.
     match /bookings/{bookingId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
     match /bookings/{bookingId}/tickets/{ticketId} {
        allow read, create: if request.auth != null;
    }
    
    // Contact Messages & Reports: Logged-in users can create.
    match /contact-messages/{messageId} {
        allow create: if request.auth != null;
        // Read/write access should be handled by a backend admin role.
    }
    match /reports/{reportId} {
        allow create: if request.auth != null;
    }

    // Publicly readable content collections
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Further checks in backend logic
    }
    match /communities/{communityId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Further checks in backend logic
    }
    match /businesses/{businessId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null; // Further checks in backend logic
    }
    match /deals/{dealId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null; // Further checks in backend logic
    }
     match /movies/{movieId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }
     match /classifieds/{classifiedId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null;
    }
    match /perks/{perkId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }
     match /rewards/{rewardId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }
    match /ads/{adId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }
    
    // Emergency Contacts: Public read, admin write
    match /emergency_contacts/{contactId} {
        allow get, list: if true;
        allow create, update, delete: if request.auth != null && isAdmin();
    }
  }
}
