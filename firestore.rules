
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to most collections for published content
    match /{collection}/{id} where collection in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'rewards', 'emergency_contacts'] {
      allow read: if true;
      allow write: if false; // Generally no public write
    }

    match /users/{userId} {
      // Allow user to create their own document during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to read and update their own document
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Admins can read any user document
      allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /contact-messages/{docId} {
      allow create: if true;
    }
    
    match /reports/{docId} {
      allow create: if request.auth != null;
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /saves/{saveId} {
      allow read, create, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /bookings/{bookingId} {
      allow create: if request.auth != null;
    }

    match /bookings/{bookingId}/tickets/{ticketId} {
      allow create: if request.auth != null;
    }

    // Rules for collections managed by specific roles (organizers, admins)
    match /events/{eventId} {
      allow write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true || request.resource.data.createdBy == request.auth.uid);
    }
    match /communities/{communityId} {
      allow write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true || request.auth.uid in resource.data.roles.owners);
    }
    match /businesses/{businessId} {
        allow write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true || request.resource.data.ownerId == request.auth.uid);
    }
    match /deals/{dealId} {
        allow write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true || request.resource.data.createdBy == request.auth.uid);
    }
    
    // Platform Admin Only Collections
    match /movies/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    match /perks/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
     match /rewards/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
     match /ads/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
     match /classifieds/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
     match /emergency_contacts/{docId} {
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
  }
}
