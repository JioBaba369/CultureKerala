rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===================================
    // Helper Functions
    // ===================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    function isOrganizer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.organizer == true;
    }
    
    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.moderator == true;
    }

    function isOwner(doc) {
        return request.auth.uid == doc.data.ownerId || request.auth.uid in doc.data.roles.owners;
    }
    
    function isCreator(doc) {
      return request.auth.uid == doc.data.createdBy;
    }

    function isUpdatingOwnProfile(userId) {
      // Allow users to update their own profile with basic safety checks
      // More specific field validation should be handled by server-side actions/schemas.
      return request.auth.uid == userId;
    }
    
    // ===================================
    // Collection Rules
    // ===================================
    
    // Users Collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isUser(userId); // Users can create their own document
      allow update: if isUpdatingOwnProfile(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Content Collections (Events, Businesses, Communities, Deals, Movies, Classifieds)
    match /{collection}/{docId} where collection in ['events', 'businesses', 'communities', 'deals', 'movies', 'classifieds'] {
      allow read: if true; // Publicly readable
      allow create: if isSignedIn() && (isOrganizer() || isAdmin());
      allow update: if isSignedIn() && (isCreator(resource) || isOwner(resource) || isAdmin());
      allow delete: if isSignedIn() && (isCreator(resource) || isOwner(resource) || isAdmin());
    }

    // Bookings Collection
    match /bookings/{bookingId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isUser(resource.data.userId) || isAdmin();
      
      // Tickets subcollection
      match /tickets/{ticketId} {
        allow read: if isUser(get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId) || isAdmin();
        allow list, create, update, delete: if isAdmin(); // Only admins can manage tickets directly
      }
    }
    
    // Contact Messages
    match /contact-messages/{messageId} {
      allow create: if true;
      allow read, update, delete, list: if isAdmin();
    }
    
    // Reports
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, list, update, delete: if isAdmin() || isModerator();
    }
    
    // Saves Collection
    match /saves/{saveId} {
      allow read, create, delete: if isSignedIn() && isUser(saveId.split('_')[0]);
      allow list, update: if isAdmin();
    }
    
    // Platform Admin Only Collections
    match /{collection}/{docId} where collection in ['ads', 'perks', 'rewards', 'emergency_contacts'] {
      allow read, write: if isAdmin();
    }
  }
}
