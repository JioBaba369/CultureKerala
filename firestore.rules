
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    // ===================================
    // Collection Rules
    // ===================================

    // Users can read their own data, admins can read anyone's.
    // Users can only update their own profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isUserAuthenticated() && request.resource.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isAdmin(); // Only admins can delete user accounts
    }
    
    // Public collections are readable by anyone, but writes are restricted.
    match /{collection}/{docId} where collection in ['events', 'businesses', 'communities', 'deals', 'movies', 'perks', 'classifieds'] {
       allow read: if true;
       // Further write rules can be specified for each collection below
    }

    match /emergency_contacts/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /communities/{communityId} {
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.roles.owners[0] == request.auth.uid || isAdmin());
    }

    match /businesses/{businessId} {
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    match /events/{eventId} {
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    match /deals/{dealId} {
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    match /classifieds/{classifiedId} {
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    match /movies/{movieId} {
        allow create, update, delete: if isAdmin();
    }
    
    match /perks/{perkId} {
        allow create, update, delete: if isAdmin();
    }

    match /rewards/{rewardId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Users can only manage their own saved items
    match /saves/{saveId} {
        allow read, write: if isUserAuthenticated() && saveId.split('_')[0] == request.auth.uid;
    }

    // Logged in users can create reports. Only admins can read/update them.
    match /reports/{reportId} {
        allow create: if isUserAuthenticated();
        allow read, update: if isAdmin();
    }
    
    // Users can create bookings. Admins can read all bookings.
    match /bookings/{bookingId} {
      allow create: if isUserAuthenticated();
      allow read: if isAdmin() || isOwner(resource.data.userId);
      
      // Tickets are subcollection of bookings
       match /tickets/{ticketId} {
         allow read: if isAdmin() || isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId);
       }
    }
    
    // Site config should only be readable and writable by admins
    match /config/{configId} {
        allow read, write: if isAdmin();
    }
    
    // Contact messages can be created by anyone, but only read by admins
    match /contact-messages/{messageId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }
  }
}
