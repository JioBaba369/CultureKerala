
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isUpdatingOwnProfile(userId) {
      let allowedKeys = ['displayName', 'username', 'bio', 'photoURL', 'dob', 'gender', 'interests', 'updatedAt'];
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      
      return request.auth.uid == userId && affectedKeys.hasOnly(allowedKeys);
    }
    
    // ===================================
    // Collections
    // ===================================

    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if isUpdatingOwnProfile(userId);
    }

    match /communities/{communityId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (resource.data.roles.admins.hasAny([request.auth.uid]) || resource.data.roles.owners.hasAny([request.auth.uid]));
    }

    match /events/{eventId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.createdBy;
    }

    match /businesses/{businessId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId;
    }
    
    match /deals/{dealId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.createdBy;
    }

    match /movies/{movieId} {
      allow read;
      allow create, update: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /classifieds/{classifiedId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.createdBy;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.createdBy || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true);
    }

    match /saves/{saveId} {
      allow read, create, delete: if isSignedIn() && request.auth.uid == saveId.split('_')[0];
    }
    
    match /reports/{reportId} {
        allow read, create: if isSignedIn();
        allow update: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /bookings/{bookingId} {
        allow read, create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
        allow update: if false; // Bookings should be immutable
    }

    match /bookings/{bookingId}/tickets/{ticketId} {
       allow read, create: if isSignedIn();
    }
    
    match /contact-messages/{messageId} {
        allow read, update: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
        allow create: if true;
    }

    // ===================================
    // Platform Admin Collections
    // ===================================
    
     match /ads/{adId} {
        allow read, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /perks/{perkId} {
        allow read;
        allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    match /rewards/{rewardId} {
        allow read;
        allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    match /emergency_contacts/{contactId} {
      allow read;
      allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

  }
}
