
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function isUpdatingOwnProfile(userId) {
      let allowedKeys = ['displayName', 'username', 'bio', 'photoURL', 'dob', 'gender', 'interests', 'phone', 'socials', 'updatedAt'];
      let incomingKeys = request.resource.data.keys();
      // Ensure that the user is only updating allowed fields.
      return isOwner(userId) && incomingKeys.hasAll(allowedKeys) && incomingKeys.size() == allowedKeys.size();
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isUpdatingOwnProfile(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Generic Content Rules (Events, Businesses, Communities, etc.)
    match /{collection}/{docId} {
      allow read: if resource.data.status == 'published';
      allow create: if isAuth();
      allow update: if isAuth() && (resource.data.createdBy == request.auth.uid || get(/databases/$(database)/documents/communities/$(resource.data.communityId)).data.roles.owners[request.auth.uid] == true || isAdmin());
      allow delete: if isAuth() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // Communities have more complex ownership
    match /communities/{communityId} {
        allow read: if resource.data.status == 'published';
        allow create: if isAuth();
        allow update: if isAuth() && (request.auth.uid in resource.data.roles.owners || isAdmin());
        allow delete: if isAuth() && (request.auth.uid in resource.data.roles.owners || isAdmin());
    }

    // Platform Admin Only Content
    match /emergency_contacts/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
     match /ads/{docId} {
        allow read: if resource.data.status == 'running';
        allow write: if isAdmin();
    }
    match /perks/{docId} {
        allow read: if resource.data.status == 'active';
        allow write: if isAdmin();
    }
    match /rewards/{docId} {
        allow read: if resource.data.status == 'active';
        allow write: if isAdmin();
    }
     match /movies/{docId} {
        allow read: if resource.data.status != 'draft';
        allow write: if isAdmin();
    }

    // Subcollections
     match /events/{eventId}/tickets/{ticketId} {
        allow read, write: if isAuth();
     }
     
     match /bookings/{bookingId}/{document=**} {
       allow read, write: if isAuth() && get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid;
     }

    // Contact Messages & Reports
    match /contact-messages/{docId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }
     match /reports/{docId} {
        allow create: if isAuth();
        allow read, update, delete: if isAdmin();
    }

    // Saved Items
     match /saves/{saveId} {
        allow read, create, delete: if isAuth() && resource.data.userId == request.auth.uid;
        allow update: if false; // Should not be updatable
     }
  }
}
