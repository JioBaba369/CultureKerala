
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuth() {
      return request.auth != null;
    }

    function isSelf(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow read;
      allow create: if isSelf(userId);
      allow update: if isSelf(userId) && !("roles" in request.resource.data) && !("wallet" in request.resource.data) && !("clubMembership" in request.resource.data);
    }
    
    match /{path=**}/tickets/{ticketId} {
      allow read: if isAuth(); // Can be read by event organizers or ticket holder
    }
    
    // Publicly readable collections
    match /events/{eventId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth(); // Additional logic in backend for ownership
    }
    match /businesses/{businessId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth(); // Additional logic in backend for ownership
    }
    match /communities/{communityId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth(); // Additional logic in backend for ownership
    }
    match /deals/{dealId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth(); // Additional logic in backend for ownership
    }
     match /movies/{movieId} {
      allow read;
    }
     match /classifieds/{classifiedId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth(); // Additional logic in backend for ownership
    }

    // Secure collections
    match /bookings/{bookingId} {
      allow read, write: if isAuth(); // Logic handled in transaction
    }
     match /saves/{saveId} {
      allow read, write: if isAuth();
    }
    match /reports/{reportId} {
      allow create: if isAuth();
      allow read, write: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
     match /contact-messages/{messageId} {
      allow create;
      allow read, write: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

  }
}
