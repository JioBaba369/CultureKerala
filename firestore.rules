rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(docId) {
      return request.auth.uid == docId;
    }

    function isRole(role) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[role] == true;
    }

    function isCommunityOwner(communityId) {
        let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
        return request.auth.uid in community.roles.owners;
    }

    function isBusinessOwner(businessId) {
        let business = get(/databases/$(database)/documents/businesses/$(businessId)).data;
        return request.auth.uid == business.ownerId;
    }
    
    // Users: Can read their own data, can update their own profile
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
    }

    // Communities: Publicly readable, only owners can create/update
    match /communities/{communityId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isCommunityOwner(communityId) || isRole('admin'));
      allow delete: if isSignedIn() && isRole('admin');
    }

    // Events: Publicly readable, only community owners can create/update
    match /events/{eventId} {
      allow read;
      allow create: if isSignedIn() && (isCommunityOwner(request.resource.data.communityId) || isRole('admin'));
      allow update: if isSignedIn() && (isCommunityOwner(resource.data.communityId) || isRole('admin'));
      allow delete: if isSignedIn() && (isCommunityOwner(resource.data.communityId) || isRole('admin'));
    }

    // Businesses: Publicly readable, only owners can create/update
    match /businesses/{businessId} {
        allow read;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && (isBusinessOwner(businessId) || isRole('admin'));
        allow delete: if isSignedIn() && isRole('admin');
    }

    // Deals: Publicly readable, only business owners can create/update
    match /deals/{dealId} {
        allow read;
        allow create: if isSignedIn() && (isBusinessOwner(request.resource.data.businessId) || isRole('admin'));
        allow update: if isSignedIn() && (isBusinessOwner(resource.data.businessId) || isRole('admin'));
        allow delete: if isSignedIn() && isRole('admin');
    }

    // Movies: Publicly readable, only admins can manage
    match /movies/{movieId} {
        allow read;
        allow create, update, delete: if isSignedIn() && isRole('admin');
    }

    // Bookings & Tickets: Only readable/writable by the user who owns them
    match /bookings/{bookingId} {
      allow create: if isSignedIn(); 
      allow read, update: if isSignedIn() && get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid;

      match /tickets/{ticketId} {
        allow read: if isSignedIn(); // Could be locked down more
        allow create: if isSignedIn(); // Transaction should handle security
      }
    }
    
    // Saves: Logged-in users can manage their own saves
    match /saves/{saveId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Reports: Logged-in users can create, admins/moderators can read/update
    match /reports/{reportId} {
        allow create: if isSignedIn();
        allow read, update: if isSignedIn() && (isRole('admin') || isRole('moderator'));
    }

    // Perks: Publicly readable, admin only write
    match /perks/{perkId} {
        allow read;
        allow create, update, delete: if isSignedIn() && isRole('admin');
    }

    // Rewards: Publicly readable, admin only write
    match /rewards/{rewardId} {
        allow read;
        allow create, update, delete: if isSignedIn() && isRole('admin');
    }

     // Ads: Admin only
    match /ads/{adId} {
        allow read, create, update, delete: if isSignedIn() && isRole('admin');
    }

    // Admin-only collections
    match /contact-messages/{messageId} {
      allow create: if true;
      allow read, update, delete: if isSignedIn() && isRole('admin');
    }
  }
}
