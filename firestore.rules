
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Public collections can be read by anyone
    match /{collectionName}/{docId} where collectionName in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'emergency_contacts'] {
      allow read: if true;
      allow write: if false; // Default to no write access for public collections
    }
    
    // Users can create their own user document, and only they can update it.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Bookings can be created by signed-in users, but only read by the user who made them.
    match /bookings/{bookingId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update, delete: if false;

      match /tickets/{ticketId} {
        allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
    }
    
    // Users can save or unsave items for themselves.
    match /saves/{saveId} {
      allow read, write: if isSignedIn() && saveId.split('_')[0] == request.auth.uid;
    }

    // Reports can only be created by signed in users.
    match /reports/{reportId} {
        allow create: if isSignedIn();
        allow read, update, delete: if false; // Managed by backend/admins
    }
    
     // Contact messages can only be created.
    match /contact-messages/{messageId} {
        allow create: if true;
        allow read, update, delete: if false;
    }
  }
}
