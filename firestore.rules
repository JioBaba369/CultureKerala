rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function signedIn() {
      return request.auth != null;
    }

    function isOrgAdmin(orgId) {
      let userRoles = get(/databases/$(db)/documents/users/$(request.auth.uid)).data.roles;
      let orgAdmins = get(/databases/$(db)/documents/orgs/$(orgId)).data.admins;
      return signedIn() && (
        userRoles.superAdmin == true ||
        (exists(/databases/$(db)/documents/orgs/$(orgId)) && orgAdmins.hasAny([request.auth.uid]))
      );
    }
    
    function isSuperAdmin() {
      return signedIn() && get(/databases/$(db)/documents/users/$(request.auth.uid)).data.roles.superAdmin == true;
    }

    match /users/{uid} {
      allow read: if true;
      allow write: if signedIn() && request.auth.uid == uid;
    }

    match /orgs/{orgId} {
      allow read: if true;
      allow create: if signedIn();
      allow update, delete: if isOrgAdmin(orgId);
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if signedIn() && isOrgAdmin(request.resource.data.orgId);
      allow update, delete: if signedIn() && isOrgAdmin(resource.data.orgId);
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if signedIn();
      allow update, delete: if signedIn() && (request.auth.uid == resource.data.authorId || isSuperAdmin());
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
