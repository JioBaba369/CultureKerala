
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).roles.admin == true;
    }
    
    function isCommunityOwner(communityId) {
       return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }
    
    function isBusinessOwner(businessId) {
    	 return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Public read-only collections
    match /events/{eventId} {
    	allow get: if resource.data.status == 'published' && resource.data.visibility == 'public';
      allow list: if true; // Listing is open, individual gets are protected.
    }
    match /communities/{communityId} {
    	allow get: if resource.data.status == 'published';
       allow list: if true;
    }
     match /businesses/{businessId} {
    	allow get: if resource.data.status == 'published';
       allow list: if true;
    }
     match /deals/{dealId} {
    	allow get: if resource.data.status == 'published';
       allow list: if true;
    }
    match /movies/{movieId} {
    	allow get: if resource.data.status == 'now_showing';
       allow list: if true;
    }
    match /perks/{perkId} {
    	allow get: if resource.data.status == 'active';
       allow list: if true;
    }
    match /rewards/{rewardId} {
    	allow get: if resource.data.status == 'active';
       allow list: if true;
    }
    
    // User data
    match /users/{userId} {
      allow get: if isSignedIn();
      allow update: if isOwner(userId);
      // Create is handled by a backend function (auth trigger)
    }
    
    // Authenticated actions
    match /saves/{saveId} {
    	allow read, create, delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    match /reports/{reportId} {
    	allow create: if isSignedIn() && isOwner(request.resource.data.reporterId);
      // Reads/updates are admin-only
    }
    match /bookings/{bookingId} {
    	allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
     match /bookings/{bookingId}/tickets/{ticketId} {
    	allow read: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Admin & Owner write access
    match /events/{eventId} {
    	allow create: if isSignedIn() && (isCommunityOwner(request.resource.data.communityId) || isAdmin());
      allow update: if isSignedIn() && (isCommunityOwner(resource.data.communityId) || isAdmin());
      allow delete: if isAdmin();
    }
    match /communities/{communityId} {
    	allow create: if isSignedIn(); // Any signed-in user can create a community
      allow update: if isCommunityOwner(communityId) || isAdmin();
      allow delete: if isAdmin();
    }
    match /businesses/{businessId} {
    	allow create: if isSignedIn();
      allow update: if isBusinessOwner(businessId) || isAdmin();
      allow delete: if isAdmin();
    }
    match /deals/{dealId} {
    	allow create: if isBusinessOwner(request.resource.data.businessId) || isAdmin();
      allow update: if isBusinessOwner(resource.data.businessId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Admin-only collections
    match /contact-messages/{messageId} {
    	allow create: if true; // Public contact form
    	allow read, update, delete: if isAdmin();
    }
     match /reports/{reportId} {
    	allow read, update, delete: if isAdmin();
    }
    match /movies/{movieId} {
    	allow read, write: if isAdmin();
    }
    match /perks/{perkId} {
    	allow read, write: if isAdmin();
    }
     match /rewards/{rewardId} {
    	allow read, write: if isAdmin();
    }
     match /ads/{adId} {
    	allow read, write: if isAdmin();
    }
  }
}
