rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.moderator == true;
    }
    function isOrganizer() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.organizer == true;
    }
    function isAuthenticated() {
      return request.auth != null;
    }

    // ===================================
    //  Publicly Readable Collections
    // ===================================
    match /{collection}/{docId} 
    where collection in ['events', 'businesses', 'communities', 'deals', 'movies', 'perks', 'rewards', 'classifieds'] {
      allow read: if true;
    }

    // ===================================
    //  Users
    // ===================================
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // ===================================
    //  Events
    // ===================================
    match /events/{eventId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.createdBy);
      allow update: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
      allow delete: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
    }
    
    // ===================================
    //  Communities
    // ===================================
    match /communities/{communityId} {
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.roles.owners;
        allow update: if (isAuthenticated() && request.auth.uid in resource.data.roles.admins) || isAdmin();
        allow delete: if (isAuthenticated() && request.auth.uid in resource.data.roles.owners) || isAdmin();
    }

    // ===================================
    //  Businesses
    // ===================================
     match /businesses/{businessId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
        allow update: if (isAuthenticated() && isOwner(resource.data.ownerId)) || isAdmin();
        allow delete: if (isAuthenticated() && isOwner(resource.data.ownerId)) || isAdmin();
    }
    
    // ===================================
    //  Deals
    // ===================================
    match /deals/{dealId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.createdBy);
        allow update: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
        allow delete: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
    }

    // ===================================
    //  Classifieds
    // ===================================
    match /classifieds/{classifiedId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.createdBy);
      allow update: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
      allow delete: if (isAuthenticated() && isOwner(resource.data.createdBy)) || isAdmin();
    }

    // ===================================
    //  Saves & Reports (User-Specific)
    // ===================================
    match /saves/{saveId} {
      allow read, create, delete: if isAuthenticated() && isOwner(request.auth.uid);
    }
    
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isModerator();
      allow read, delete: if isAdmin() || isModerator();
    }
    
    // ===================================
    //  Bookings & Tickets
    // ===================================
     match /bookings/{bookingId} {
        allow read, create: if isAuthenticated() && isOwner(request.resource.data.userId);

        match /tickets/{ticketId} {
            allow read, create: if isAuthenticated();
        }
     }
     
    // ===================================
    //  Admin-Only Collections
    // ===================================
    match /contact-messages/{messageId} {
        allow read, write: if isAdmin();
    }

    match /movies/{movieId} {
        allow write: if isAdmin();
    }

    match /perks/{perkId} {
        allow write: if isAdmin();
    }

    match /rewards/{rewardId} {
        allow write: if isAdmin();
    }
    
     match /ads/{adId} {
        allow write: if isAdmin();
    }
  }
}
