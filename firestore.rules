rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===================================
    // Helper Functions
    // ===================================
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getRequestingUserData() {
        return getUserData(request.auth.uid);
    }

    function isAdmin() {
      return isAuth() && getRequestingUserData().roles.admin == true;
    }
    
    function isModerator() {
      return isAuth() && (isAdmin() || getRequestingUserData().roles.moderator == true);
    }
    
    function isOrganizer() {
        return isAuth() && (isAdmin() || getRequestingUserData().roles.organizer == true);
    }

    function isCommunityOwner(communityId) {
        return isAuth() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }

    function isBusinessOwner(businessId) {
        return isAuth() && get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
    }

    // ===================================
    // Collection Rules
    // ===================================

    // Public collections are readable by anyone
    match /{path=**}/events/{eventId} {
      allow read: if true;
      allow create: if isAuth() && (isAdmin() || isCommunityOwner(request.resource.data.communityId));
      allow update, delete: if isAuth() && (isAdmin() || isCommunityOwner(resource.data.communityId));
    }
    match /{path=**}/communities/{communityId} {
        allow read: if true;
        allow create: if isAuth();
        allow update, delete: if isAuth() && (isAdmin() || isCommunityOwner(communityId));
    }
    match /{path=**}/businesses/{businessId} {
        allow read: if true;
        allow create: if isAuth();
        allow update, delete: if isAuth() && (isAdmin() || isBusinessOwner(businessId));
    }
    match /{path=**}/deals/{dealId} {
        allow read: if true;
        allow create: if isAuth() && (isAdmin() || isBusinessOwner(request.resource.data.businessId));
        allow update, delete: if isAuth() && (isAdmin() || isBusinessOwner(resource.data.businessId));
    }
    match /{path=**}/movies/{movieId} {
        allow read: if true;
        allow create, update, delete: if isModerator();
    }
    match /{path=**}/perks/{perkId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
     match /{path=**}/rewards/{rewardId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
     match /{path=**}/ads/{adId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }


    // User-specific collections
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuth() && isOwner(userId);
      // Users can update their own safe fields, admins can update anything.
      allow update: if (isAuth() && isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'username', 'bio', 'photoURL', 'updatedAt', 'location', 'languages', 'website', 'interests', 'notifications', 'privacy', 'handles', 'lastActiveAt'])) || isAdmin();
    }
    
    match /saves/{saveId} {
        allow read, create, delete: if isAuth() && isOwner(saveId.split('_')[0]);
    }

    match /bookings/{bookingId} {
        allow read: if isAuth() && (isOwner(resource.data.userId) || isModerator());
        allow create: if isAuth() && isOwner(request.resource.data.userId);
    }
     match /bookings/{bookingId}/tickets/{ticketId} {
        allow read, create: if isAuth() && (isOwner(request.resource.data.userId) || isModerator());
    }

    match /reports/{reportId} {
        allow read: if isModerator();
        allow create: if isAuth();
        allow update: if isModerator();
    }

    match /contact-messages/{messageId} {
        allow read: if isModerator();
        allow create: if true;
    }
    
    match /sales/{saleId} {
        allow read: if isAdmin();
    }
  }
}
