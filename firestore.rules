rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCommunityOwner(communityId) {
        return request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }
    
    function isBusinessOwner(businessId) {
        return request.auth.uid == get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId;
    }

    function isAppAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function isAppModerator() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.moderator == true;
    }

    // Public collections are readable by anyone
    match /{collectionName}/{docId} 
      where collectionName in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'emergency_contacts', 'rewards'] {
      allow read: if true;
    }

    // Users can create their own profile, can only update their own, public can read
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) || isAppAdmin();
      allow delete: if isAppAdmin(); // Only admins can delete users
    }
    
    // Events can be created by their owner, or by owners of the linked community/business
    match /events/{eventId} {
      allow create: if (isOwner(request.resource.data.createdBy) && request.resource.data.organizerType == 'user') ||
                       (isCommunityOwner(request.resource.data.communityId) && request.resource.data.organizerType == 'community') ||
                       (isBusinessOwner(request.resource.data.businessId) && request.resource.data.organizerType == 'business') ||
                       isAppAdmin();
      allow update: if isOwner(resource.data.createdBy) || isAppAdmin() || 
                       (resource.data.communityId != null && isCommunityOwner(resource.data.communityId)) || 
                       (resource.data.businessId != null && isBusinessOwner(resource.data.businessId));
      allow delete: if isOwner(resource.data.createdBy) || isAppAdmin();
    }
    
    // Writes restricted to owners or admins for these collections
    match /communities/{communityId} {
        allow create, update, delete: if isCommunityOwner(communityId) || isAppAdmin();
    }
    
    match /businesses/{businessId} {
        allow create, update, delete: if isBusinessOwner(businessId) || isAppAdmin();
    }

    match /deals/{dealId} {
        allow create, update, delete: if isOwner(request.auth.uid) || isAppAdmin();
    }

     match /classifieds/{classifiedId} {
        allow create: if request.auth != null;
        allow update, delete: if isOwner(resource.data.createdBy) || isAppAdmin();
    }

    // Logged-in users can save/unsave items for themselves
    match /saves/{saveId} {
        allow read, create, delete: if request.auth != null && request.auth.uid == saveId.split('_')[0];
    }
    
    // Logged-in users can book tickets, read their own
    match /bookings/{bookingId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId) || isAppAdmin();

      // Tickets subcollection
       match /tickets/{ticketId} {
         allow read, create: if request.auth != null;
      }
    }
    
    // Logged-in users can submit reports
    match /reports/{reportId} {
        allow create: if request.auth != null;
        allow read, update: if isAppAdmin() || isAppModerator();
    }

    // Only admins can manage platform-wide data
    match /movies/{movieId} {
        allow create, update, delete: if isAppAdmin();
    }
    match /ads/{adId} {
        allow create, update, delete: if isAppAdmin();
    }
    match /perks/{perkId} {
        allow create, update, delete: if isAppAdmin();
    }
     match /rewards/{rewardId} {
        allow create, update, delete: if isAppAdmin();
    }
    match /emergency_contacts/{contactId} {
        allow create, update, delete: if isAppAdmin();
    }
    match /contact-messages/{messageId} {
        allow create: if true; // Public contact form
        allow read, update, delete: if isAppAdmin();
    }
  }
}
