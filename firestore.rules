
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roles.admin == true;
    }

    // Publicly readable collections
    match /{collection}/{docId} 
    where collection in ['events', 'communities', 'businesses', 'deals', 'movies', 'classifieds', 'perks', 'rewards', 'emergency_contacts'] {
      allow read: if true;
      allow write: if request.auth != null && (isAdmin(request.auth.uid) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.organizer == true);
    }

    // Users can be read publicly (for profiles), but only owners can write.
    match /users/{userId} {
      allow read: if true;
      // Allow a user to create/update their own document.
      allow write: if request.auth.uid == userId;
    }
    
    // Reports can only be created by logged-in users, read/updated by admins
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Saves can only be managed by the user who owns them
    match /saves/{saveId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Bookings can only be created by logged-in users, but not read directly
    // (they will be accessed via server-side logic with admin credentials)
    match /bookings/{bookingId} {
      allow create: if request.auth != null;
      allow read, write, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /bookings/{bookingId}/tickets/{ticketId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (isAdmin(request.auth.uid) || get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid);
    }

    // Contact messages can only be created
    match /contact-messages/{messageId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
