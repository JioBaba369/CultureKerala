rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    
    function authed() {
      return request.auth != null;
    }

    function isUser(userId) {
      return authed() && request.auth.uid == userId;
    }

    function isMe(userId) {
        return authed() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return authed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function isModerator() {
        return authed() && (isAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.moderator == true);
    }
    
    function isResourceOwner(fieldName) {
        return request.auth.uid == resource.data[fieldName];
    }
    
    function requestIsResourceOwner(fieldName) {
        return request.auth.uid == request.resource.data[fieldName];
    }

    function isCommunityOwner(communityId) {
        let community = get(/databases/$(database)/documents/communities/$(communityId)).data;
        return authed() && request.auth.uid in community.roles.owners;
    }
    
    function isBusinessOwner(businessId) {
        let business = get(/databases/$(database)/documents/businesses/$(businessId)).data;
        return authed() && request.auth.uid == business.ownerId;
    }

    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      allow read: if true;
      allow create: if isMe(userId);
      allow update: if isMe(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /events/{eventId} {
      allow read: if true;
      allow create: if authed();
      allow update, delete: if authed() && (isResourceOwner('createdBy') || isAdmin());
    }

    match /communities/{communityId} {
      allow read: if true;
      allow create: if authed();
      allow update: if authed() && (request.auth.uid in resource.data.roles.owners || isAdmin());
      allow delete: if authed() && (request.auth.uid in resource.data.roles.owners || isAdmin());
    }

    match /businesses/{businessId} {
      allow read: if true;
      allow create: if authed();
      allow update, delete: if (authed() && isResourceOwner('ownerId')) || isAdmin();
    }
    
    match /deals/{dealId} {
      allow read: if true;
      allow create: if authed() && isBusinessOwner(request.resource.data.businessId);
      allow update, delete: if (authed() && isBusinessOwner(resource.data.businessId)) || isAdmin();
    }
    
    match /classifieds/{classifiedId} {
        allow read: if true;
        allow create: if authed();
        allow update, delete: if (authed() && isResourceOwner('createdBy')) || isAdmin();
    }

    match /movies/{movieId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    match /perks/{perkId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /rewards/{rewardId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /ads/{adId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /saves/{saveId} {
      allow read: if authed() && isResourceOwner('userId');
      allow create: if authed() && requestIsResourceOwner('userId');
      allow delete: if authed() && isResourceOwner('userId');
    }

    match /reports/{reportId} {
      allow read: if isModerator();
      allow create: if authed();
      allow update: if isModerator();
      allow delete: if isAdmin();
    }
    
    match /bookings/{bookingId} {
      allow read: if authed() && isResourceOwner('userId');
      allow create: if authed() && requestIsResourceOwner('userId');
    }
    
    match /bookings/{bookingId}/tickets/{ticketId} {
      allow read, list: if authed() && (get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid || isAdmin());
    }
    
     match /contact-messages/{messageId} {
        allow read, list, delete: if isAdmin();
        allow create: if true;
     }
  }
}
