rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUpdatingOwnProfile(userId) {
      let allowedFields = ['displayName', 'username', 'bio', 'photoURL', 'dob', 'gender', 'interests', 'location'];
      let sentKeys = request.resource.data.keys();
      let modifiedKeys = request.resource.data.diff(resource.data).affectedKeys();

      let isUpdatingAllowedFields = modifiedKeys.hasOnly(allowedFields);
      let isSettingTimestamp = sentKeys.hasAll(['updatedAt']) && request.resource.data.updatedAt == request.time;
      
      // This case is for the initial user creation where we set more fields.
      if (!exists(path)) {
        return true; 
      }
      
      // When updating, we must only touch allowed fields.
      return isOwner(userId)
          && isUpdatingAllowedFields
          && request.resource.data.updatedAt == request.time;
    }
     
    // Loosest rule: anyone can read anything.
    match /{document=**} {
      allow read: if true;
    }
    
    match /contact-messages/{messageId} {
      allow create: if true;
    }

    match /reports/{reportId} {
      allow create: if request.auth != null;
    }
    
    match /saves/{saveId} {
        allow create, delete: if isOwner(request.resource.data.userId);
    }
    
    match /bookings/{bookingId} {
        allow create: if isOwner(request.resource.data.userId);
    }
    
    match /bookings/{bookingId}/tickets/{ticketId} {
        allow create: if isOwner(request.resource.data.userId);
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isUpdatingOwnProfile(userId);
    }
  }
}
