
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isUserAuthenticated() && request.auth.uid == uid;
    }

    function userHasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[role] == true;
    }

    function isContentOwner(collectionName, resourceId, key) {
        return get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data[key] == request.auth.uid;
    }
    
    function isCommunityOwner(communityId) {
        return request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }

    // Users can only manage their own data
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if isUser(userId);
    }
    
    match /contact-messages/{messageId} {
        allow create: if true;
        allow read, write: if userHasRole('admin');
    }

    match /reports/{reportId} {
        allow create: if isUserAuthenticated();
        allow read, write: if userHasRole('admin') || userHasRole('moderator');
    }

    match /saves/{saveId} {
        allow read, create, delete: if isUser(saveId.split('_')[0]);
    }
    
    // Communities can be created by any authenticated user
    // but can only be updated/deleted by the owner
    match /communities/{communityId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update: if isCommunityOwner(communityId) || userHasRole('admin');
      allow delete: if isCommunityOwner(communityId) || userHasRole('admin');
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if isUserAuthenticated(); // Further logic handled in backend/actions
      allow update, delete: if isContentOwner('events', eventId, 'createdBy') || userHasRole('admin');
    }

    match /businesses/{businessId} {
       allow read: if true;
       allow create: if isUserAuthenticated();
       allow update, delete: if isContentOwner('businesses', businessId, 'ownerId') || userHasRole('admin');
    }

    match /deals/{dealId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update, delete: if isContentOwner('deals', dealId, 'createdBy') || userHasRole('admin');
    }
    
    match /movies/{movieId} {
        allow read: if true;
        allow create, update, delete: if userHasRole('admin');
    }

    match /perks/{perkId} {
        allow read: if true;
        allow create, update, delete: if userHasRole('admin');
    }
    
    match /rewards/{rewardId} {
        allow read: if true;
        allow create, update, delete: if userHasRole('admin');
    }

    match /ads/{adId} {
        allow read, create, update, delete: if userHasRole('admin');
    }

    match /bookings/{bookingId} {
      allow create: if isUserAuthenticated();
      allow read: if isContentOwner('bookings', bookingId, 'userId') || userHasRole('admin');
      match /tickets/{ticketId} {
        allow create: if isUserAuthenticated();
        allow read: if isContentOwner('bookings', bookingId, 'userId') || userHasRole('admin');
      }
    }
  }
}
