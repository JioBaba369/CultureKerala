
rules_version = '2';

service cloud.firestore {
 match /databases/{database}/documents {

    // Helper functions to check user authentication and roles
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAppAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }
    
    function isCommunityOwner(communityId) {
        return isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read public profiles, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }
    
    // Public can read published events. Organizers/Admins can write.
    match /events/{eventId} {
      allow read: if resource.data.status == 'published';
      allow create: if isUserAuthenticated(); // Further checks in server-side logic
      allow update: if isUserAuthenticated() && (request.auth.uid in resource.data.organizers || isAppAdmin());
      allow delete: if isUserAuthenticated() && (request.auth.uid in resource.data.organizers || isAppAdmin());
    }

    // Public can read published communities. Owners/Admins can write.
    match /communities/{communityId} {
      allow read: if resource.data.status == 'published';
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (request.auth.uid in resource.data.roles.owners || isAppAdmin());
      allow delete: if isUserAuthenticated() && (request.auth.uid in resource.data.roles.owners || isAppAdmin());
    }
    
    // Public can read published businesses. Owners/Admins can write.
    match /businesses/{businessId} {
      allow read: if resource.data.status == 'published';
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (resource.data.ownerId == request.auth.uid || isAppAdmin());
      allow delete: if isUserAuthenticated() && (resource.data.ownerId == request.auth.uid || isAppAdmin());
    }
    
    // Public can read published deals. Owners/Admins can write.
    match /deals/{dealId} {
       allow read: if resource.data.status == 'published';
       allow create: if isUserAuthenticated();
       allow update, delete: if isUserAuthenticated() && (resource.data.createdBy == request.auth.uid || isAppAdmin());
    }
    
    // Public can read movies. Admins can write.
    match /movies/{movieId} {
        allow read: if true;
        allow write: if isAppAdmin();
    }
    
    // Users can save/unsave items for themselves.
    match /saves/{saveId} {
        allow read, write: if isUserAuthenticated() && saveId.split('_')[0] == request.auth.uid;
    }
    
    // Users can submit reports. Admins can manage them.
    match /reports/{reportId} {
        allow create: if isUserAuthenticated();
        allow read, update, delete: if isAppAdmin();
    }
    
    // Users can submit contact messages. Admins can read them.
    match /contact-messages/{messageId} {
        allow create: if true;
        allow read, update, delete: if isAppAdmin();
    }
    
    // Bookings are private to the user and the event organizer/admin
    match /bookings/{bookingId} {
        allow read, create: if isUserAuthenticated(); // Simplified for now, server logic handles validation
        allow update, delete: if isAppAdmin();
    }
     match /bookings/{bookingId}/tickets/{ticketId} {
        allow read, create: if isUserAuthenticated();
        allow update, delete: if isAppAdmin();
    }
    
    // Perks are readable by all, writable only by admins
    match /perks/{perkId} {
        allow read: if true;
        allow write: if isAppAdmin();
    }
    
    // Rewards are readable by all, writable only by admins
    match /rewards/{rewardId} {
        allow read: if true;
        allow write: if isAppAdmin();
    }
    
    // Ads are managed by admins
    match /ads/{adId} {
        allow read, write: if isAppAdmin();
    }
 }
}
