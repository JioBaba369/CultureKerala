
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isAppAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function isCommunityOwner(communityId) {
       return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.owners;
    }

    function isCommunityAdmin(communityId) {
       return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.admins;
    }
     function isCommunityMod(communityId) {
       return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.roles.moderators;
    }

    function isCommunityManager(communityId) {
       return isCommunityOwner(communityId) || isCommunityAdmin(communityId) || isCommunityMod(communityId);
    }
    
    // Public read-only collections
    match /{collection}/{docId} where collection in ['events', 'communities', 'businesses', 'deals', 'movies', 'perks', 'rewards'] {
      allow get: if true;
      allow list: if true;
      // Write rules are more specific below
      allow create, update, delete: if false; 
    }

    // User profiles can be read by anyone, but only the owner can write
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId) || isAppAdmin();
    }
    
    // Bookings can only be created by signed-in users and read by their owners or admins
    match /bookings/{bookingId} {
        allow read: if isOwner(resource.data.userId) || isAppAdmin();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Tickets are a subcollection of bookings
        match /tickets/{ticketId} {
             allow read, create: if isOwner(parent.data.userId) || isAppAdmin();
        }
    }
    
    // Saves can only be managed by the user who owns them
    match /saves/{saveId} {
        allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    // Anyone can send a contact message or report
    match /contact-messages/{docId} {
        allow create: if true;
        allow read, update, delete: if isAppAdmin();
    }
     match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update: if isAppAdmin(); // Admins can manage reports
    }

    // ===================================
    // More specific write rules for admins/owners
    // ===================================

    match /events/{eventId} {
       allow create: if isSignedIn() && (isAppAdmin() || (request.resource.data.communityId != null && isCommunityManager(request.resource.data.communityId)));
       allow update: if isSignedIn() && (isAppAdmin() || (resource.data.communityId != null && isCommunityManager(resource.data.communityId)));
       allow delete: if isAppAdmin();
    }

     match /communities/{communityId} {
       allow create: if isSignedIn(); // Anyone can create a community
       allow update: if isAppAdmin() || isCommunityManager(communityId);
       allow delete: if isAppAdmin();
    }
    
     match /businesses/{businessId} {
       allow create: if isSignedIn();
       allow update, delete: if isAppAdmin() || isOwner(resource.data.ownerId);
    }

     match /deals/{dealId} {
       allow create: if isSignedIn();
       allow update, delete: if isAppAdmin() || isOwner(resource.data.createdBy);
    }
    
    match /movies/{movieId} {
        allow create, update, delete: if isAppAdmin();
    }
    
    match /perks/{perkId} {
         allow create, update, delete: if isAppAdmin();
    }
    
     match /rewards/{rewardId} {
         allow create, update, delete: if isAppAdmin();
    }

     match /ads/{adId} {
         allow create, update, delete: if isAppAdmin();
     }
  }
}
