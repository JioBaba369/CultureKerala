
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSelf(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function isOwner(resource) {
      return isSelf(resource.data.createdBy) || isSelf(resource.data.ownerId) || request.auth.uid in resource.data.roles.owners;
    }
    
    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUpdatingProfileData() {
      let allowedFields = ['displayName', 'username', 'bio', 'photoURL', 'interests', 'dob', 'gender', 'updatedAt'];
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    function isCreatingUser() {
      let allowedFields = ['uid', 'id', 'email', 'displayName', 'username', 'location', 'photoURL', 'roles', 'status', 'hasCompletedOnboarding', 'createdAt', 'updatedAt'];
       return request.resource.data.keys().hasOnly(allowedFields) && request.resource.data.uid == request.auth.uid;
    }
    
    // ===================================
    // Collection Rules
    // ===================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSelf(userId) && isCreatingUser();
      allow update: if isSelf(userId) && isUpdatingProfileData();
      // Deletes should be handled by an admin or a cloud function for data integrity.
      allow delete: if false; 
    }

    match /events/{eventId} {
      allow read: if resource.data.status == 'published' || isOwner(resource) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();
    }
    
    match /communities/{communityId} {
      allow read: if resource.data.status == 'published' || isOwner(resource) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();
    }

    match /businesses/{businessId} {
      allow read: if resource.data.status == 'published' || isOwner(resource) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();
    }
    
    match /deals/{dealId} {
      allow read: if resource.data.status == 'published' || isOwner(resource) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();
    }

    match /classifieds/{classifiedId} {
      allow read: if resource.data.status == 'published' || isOwner(resource) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(resource) || isAdmin();
      allow delete: if isOwner(resource) || isAdmin();
    }

    match /movies/{movieId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }

    match /bookings/{bookingId} {
      allow read: if isSelf(resource.data.userId) || isAdmin();
      allow create: if isSignedIn(); // Further validation in transaction
      allow update, delete: if isSelf(resource.data.userId) || isAdmin();
    }
    
    match /bookings/{bookingId}/tickets/{ticketId} {
      allow read, list: if isSelf(get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId) || isAdmin();
      allow write: if false; // Should be created in transaction only
    }

    match /saves/{saveId} {
      allow read, create, delete: if isSelf(saveId.split('_')[0]);
      allow update: if false;
    }
    
    match /reports/{reportId} {
      allow read, update: if isAdmin();
      allow create: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    match /contact-messages/{messageId} {
       allow read, create, update, delete: if isAdmin();
       allow create: if true; // Public contact form
    }

    // Platform-only collections
    match /perks/{perkId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }

    match /rewards/{rewardId} {
       allow read;
       allow create, update, delete: if isAdmin();
    }
    
    match /ads/{adId} {
       allow read;
       allow create, update, delete: if isAdmin();
    }

     match /emergency_contacts/{contactId} {
       allow read;
       allow create, update, delete: if isAdmin();
    }
  }
}
